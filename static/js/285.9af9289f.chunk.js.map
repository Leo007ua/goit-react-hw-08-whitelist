{"version":3,"file":"static/js/285.9af9289f.chunk.js","mappings":"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","sources":["components/Contact/Contact.jsx","components/ContactsList/ContactsList.styled.js","redux/contacts/contactsSelectors.js","components/ContactsList/ContactsList.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","components/Form/Form.styled.js","components/Form/Form.jsx","pages/Contact/Contacts.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { deleteContactThunk } from 'redux/contacts/contactsOperations';\nimport { Notify } from 'notiflix';\n\nfunction Contact({ name, id, phone }) {\n  const dispatch = useDispatch();\n\n  const deleteContact = contactId => {\n    dispatch(deleteContactThunk(contactId));\n    Notify.success(\n      `Contact whith name ${name} successfully added to phonebook!`\n    );\n  };\n\n  return (\n    <li key={id}>\n      <p>\n        {name}: <span>{phone}</span>\n      </p>\n      <button\n        type=\"button\"\n        onClick={() => {\n          deleteContact(id);\n        }}\n      >\n        Delete\n      </button>\n    </li>\n  );\n}\n\nexport default Contact;\n\nContact.propType = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const StyledContactsTitle = styled.h2`\n  text-align: center;\n`;\n\nexport const StyledContactsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  max-width: 350px;\n  width: 100%;\n  margin: 20px auto 25px;\n  gap: 16px;\n\n  list-style: none;\n`;\n","export const selectContacts = state => state.appContacts.contacts;\nexport const selectFilter = state => state.appContacts.filter;\nexport const selectIsLoading = state => state.appContacts.isLoading;\nexport const selectError = state => state.appContacts.error;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Contact from 'components/Contact/Contact';\nimport { StyledContactsList, StyledContactsTitle } from './ContactsList.styled';\nimport { useSelector } from 'react-redux';\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\n\nfunction ContactsList({ title, contacts, deleteContact }) {\n  const filter = useSelector(selectFilter);\n  const contactsFilter = () => {\n    return contacts.filter(({ name }) =>\n      name?.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const filteredContacts = contactsFilter();\n\n  return (\n    <>\n      <StyledContactsTitle>{title}</StyledContactsTitle>\n      <StyledContactsList>\n        {filteredContacts.map(({ name, id, number }) => {\n          return (\n            <Contact\n              key={id}\n              name={name}\n              id={id}\n              phone={number}\n              deleteContact={deleteContact}\n            ></Contact>\n          );\n        })}\n      </StyledContactsList>\n    </>\n  );\n}\n\nexport default ContactsList;\n\nContactsList.propType = {\n  deleteContact: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  contacts: PropTypes.arrayOf({\n    name: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    number: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const StyledFilterTitle = styled.p`\n  text-align: center;\n`;\n\nexport const StyledFilterBox = styled.div`\n  display: flex;\n  align-items: center;\n  max-width: 350px;\n  margin: 20px auto 25px;\n  gap: 16px;\n`;\n","import React from 'react';\nimport { StyledFilterBox, StyledFilterTitle } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/contactsSelectors';\n\nfunction Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const handleFilter = event => dispatch(setFilter(event.currentTarget.value));\n\n  return (\n    <StyledFilterBox>\n      <StyledFilterTitle>Find contacts by name</StyledFilterTitle>\n      <input value={filter} type=\"text\"  onChange={handleFilter} placeholder=\"Search name\" required />\n    </StyledFilterBox>\n  );\n}\n\nexport default Filter;\n","import styled from '@emotion/styled';\n\nexport const StyledForm = styled.form`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  max-width: 350px;\n  width: 100%;\n  margin: 20px auto 25px;\n  gap: 16px;\n\n  .form-label {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n\n  .form-btn {\n    width: 100px;\n    height: 30px;\n    background-color: aqua;\n    border: none;\n    border-radius: 5px;\n    box-shadow: rgba(60, 64, 67, 0.3) 0px 1px 2px 0px,\n        rgba(60, 64, 67, 0.15) 0px 2px 6px 2px;;\n    cursor: pointer;\n    &:active {\n      background-color: green;\n      color: white;\n    }\n    &:hover{\n        background-color: lightgreen;\n    }\n    transition: background-color 0.5s;\n  }\n`;\n","import { useState } from 'react';\nimport { StyledForm } from './Form.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\nimport { addContactThunk } from 'redux/contacts/contactsOperations';\nimport { Notify } from 'notiflix';\n\n\nexport default function Form({ title }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleChange = ({ currentTarget: { name, value } }) => {\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    const contactData = {name, number};\n    const loveredContactData = contactData.name.toLowerCase();\n    const isContactExist = contacts.some(\n      contact => contact.name.toLowerCase() === loveredContactData\n    );\n    const resetInputForm = () => {\n      setName('');\n      setNumber('');\n    };\n\n    if (isContactExist) {\n      alert(`Contact whith name ${contactData.name} is already exists`);\n      return;\n    }\n\n    dispatch(addContactThunk(contactData));\n    Notify.success(\n      `Contact whith name ${contactData.name} successfully added to phonebook!`\n    );\n    resetInputForm();\n  };\n\n  return (\n    <StyledForm onSubmit={handleSubmit}>\n      <h2>{title}</h2>\n      <label className=\"form-label\">\n        <span>Name</span>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"contactName\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n          placeholder=\"Your name\"\n        />\n      </label>\n\n      <label className=\"form-label\">\n        <span>Number</span>\n        <input\n          type=\"tel\"\n          name=\"number\"\n          id=\"ContactNumber\"\n          pattern=\"\\+?\\d{1,4}?[\\-.\\s]?\\(?\\d{1,3}?\\)?[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,4}[\\-.\\s]?\\d{1,9}\"\n          title=\"number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={number}\n          onChange={handleChange}\n          placeholder=\"Your number\"\n        />\n      </label>\n\n      <button className=\"form-btn\" type=\"submit\">\n        Add contact\n      </button>\n    </StyledForm>\n  );\n}\n\nForm.propType = {\n  onSubmit: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n};\n","import ContactsList from 'components/ContactsList/ContactsList';\nimport Filter from 'components/Filter/Filter';\nimport Form from 'components/Form/Form';\nimport Loader from 'components/Loader/Loader';\nimport React from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getIsLoggedIn } from 'redux/auth/authSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/contactsSelectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const error = useSelector(selectError);\n  const isLoading = useSelector(selectIsLoading);\n  const IsLoggedIn = useSelector(getIsLoggedIn);\n\n  useEffect(() => {\n    if (IsLoggedIn) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, IsLoggedIn]);\n\n  return (\n    <>\n      <Form title=\"Phonebook\"></Form>\n      {contacts.length > 0 && !isLoading && <Filter></Filter>}\n      {contacts.length > 0 ? (\n        <ContactsList contacts={contacts} title=\"Contacts\"></ContactsList>\n      ) : (\n        <p>Your phone book is empty</p>\n      )}\n      {isLoading && !error && <Loader />}\n      {error && <p>Error: {error}</p>}\n    </>\n  );\n}\n"],"names":["Contact","name","id","phone","dispatch","useDispatch","type","onClick","contactId","deleteContactThunk","Notify","propType","PropTypes","number","deleteContact","StyledContactsTitle","styled","StyledContactsList","selectContacts","state","appContacts","contacts","selectFilter","filter","selectIsLoading","isLoading","selectError","error","ContactsList","title","useSelector","filteredContacts","toLowerCase","includes","map","isRequired","StyledFilterTitle","StyledFilterBox","value","onChange","event","setFilter","currentTarget","placeholder","required","StyledForm","Form","useState","setName","setNumber","handleChange","onSubmit","preventDefault","contactData","loveredContactData","some","contact","alert","addContactThunk","className","pattern","Contacts","IsLoggedIn","getIsLoggedIn","useEffect","fetchContacts","length","Loader"],"sourceRoot":""}